datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  address   String?
  postalCode  String?
  city        String?
  department  String?
  country     String?
  phoneNumber String?
  latitude  Float?
  longitude Float?
  shopName    String?   // Nom de la boutique (pour les marchands)
  shopDescription String? // Description de la boutique (pour les marchands)
  products  Product[]
  slots     Slot[]
  orders    Order[]
  reviews   Review[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  unitId      Int
  unit        Unit  @relation(fields: [unitId], references: [id])
  weight      Float?
  imageBase64 String
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  productOrders     ProductOrder[]
  reviews     Review[]
}

model Slot {
  id             Int      @id @default(autoincrement())
  dateTime       DateTime
  maxOrders      Int
  availableOrders Int     @default(0)
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  orders         Order[]
}

model Order {
  id         Int           @id @default(autoincrement())
  userId     Int
  user       User          @relation(fields: [userId], references: [id])
  slotId     Int
  slot       Slot          @relation(fields: [slotId], references: [id])
  totalPrice Float
  productOrders  ProductOrder[]
}

model ProductOrder {
  id         Int       @id @default(autoincrement())
  quantity   Int
  productId  Int
  product    Product   @relation(fields: [productId], references: [id])
  orderId    Int
  order      Order     @relation(fields: [orderId], references: [id])
}

model Review {
  id         Int       @id @default(autoincrement())
  rating     Int
  comment    String
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  productId  Int
  product    Product   @relation(fields: [productId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Unit {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Role {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  users    User[]
}